diff --git a/100-remove-ucontext.patch b/100-remove-ucontext.patch
new file mode 100644
index 0000000..e69de29
diff --git a/cpu/native/mtarch.c b/cpu/native/mtarch.c
index da55744..7c4fbba 100644
--- a/cpu/native/mtarch.c
+++ b/cpu/native/mtarch.c
@@ -38,53 +38,27 @@
 #define MTARCH_STACKSIZE 4096
 #endif /* MTARCH_STACKSIZE */
 
-#if defined(_WIN32) || defined(__CYGWIN__)
-
-#define WIN32_LEAN_AND_MEAN
-#include <windows.h>
-
 static void *main_fiber;
 
-#elif defined(__linux) || defined(__APPLE__)
-
-#ifdef __APPLE__
-/* Avoid deprecated error on Darwin */
-#define _XOPEN_SOURCE
-#endif
-
 #include <stdlib.h>
 #include <signal.h>
-#include <ucontext.h>
 
 struct mtarch_t {
   char stack[MTARCH_STACKSIZE];
-  ucontext_t context;
 };
 
-static ucontext_t main_context;
-static ucontext_t *running_context;
-
-#endif /* _WIN32 || __CYGWIN__ || __linux */
 
 /*--------------------------------------------------------------------------*/
 void
 mtarch_init(void)
 {
-#if defined(_WIN32) || defined(__CYGWIN__)
-
-  main_fiber = ConvertThreadToFiber(NULL);
 
-#endif /* _WIN32 || __CYGWIN__ */
 }
 /*--------------------------------------------------------------------------*/
 void
 mtarch_remove(void)
 {
-#if defined(_WIN32) || defined(__CYGWIN__)
 
-  ConvertFiberToThread();
-
-#endif /* _WIN32 || __CYGWIN__ */
 }
 /*--------------------------------------------------------------------------*/
 void
@@ -92,94 +66,36 @@ mtarch_start(struct mtarch_thread *thread,
 	     void (* function)(void *data),
 	     void *data)
 {
-#if defined(_WIN32) || defined(__CYGWIN__)
-
-  thread->mt_thread = CreateFiber(0, (LPFIBER_START_ROUTINE)function, data);
-
-#elif defined(__linux)
-
-  thread->mt_thread = malloc(sizeof(struct mtarch_t));
-
-  getcontext(&((struct mtarch_t *)thread->mt_thread)->context);
-
-  ((struct mtarch_t *)thread->mt_thread)->context.uc_link = NULL;
-  ((struct mtarch_t *)thread->mt_thread)->context.uc_stack.ss_sp = 
-			((struct mtarch_t *)thread->mt_thread)->stack;
-  ((struct mtarch_t *)thread->mt_thread)->context.uc_stack.ss_size = 
-			sizeof(((struct mtarch_t *)thread->mt_thread)->stack);
 
-  /* Some notes:
-     - If a CPU needs stronger alignment for the stack than malloc()
-       guarantees (like i.e. IA64) then makecontext() is supposed to
-       add that alignment internally.
-     - According to POSIX the arguments to function() are of type int
-       and there are in fact 64-bit implementations which support only
-       32 bits per argument meaning that a pointer argument has to be
-       splitted into two arguments.
-     - Most implementations interpret context.uc_stack.ss_sp on entry
-       as the lowest stack address even if the CPU stack actually grows
-       downwards. Although this means that ss_sp does NOT represent the
-       CPU stack pointer this behaviour makes perfectly sense as it is
-       the only way to stay independent from the CPU architecture. But
-       Solaris prior to release 10 interprets ss_sp as highest stack
-       address thus requiring special handling. */
-  makecontext(&((struct mtarch_t *)thread->mt_thread)->context,
-	      (void (*)(void))function, 1, data);
-
-#endif /* _WIN32 || __CYGWIN__ || __linux */
 }
 /*--------------------------------------------------------------------------*/
 void
 mtarch_yield(void)
 {
-#if defined(_WIN32) || defined(__CYGWIN__)
-
-  SwitchToFiber(main_fiber);
-
-#elif defined(__linux)
 
-  swapcontext(running_context, &main_context);
-
-#endif /* _WIN32 || __CYGWIN__ || __linux */
 }
 /*--------------------------------------------------------------------------*/
 void
 mtarch_exec(struct mtarch_thread *thread)
 {
-#if defined(_WIN32) || defined(__CYGWIN__)
-
-  SwitchToFiber(thread->mt_thread);
-
-#elif defined(__linux)
 
-  running_context = &((struct mtarch_t *)thread->mt_thread)->context;
-  swapcontext(&main_context, running_context);
-  running_context = NULL;
-
-#endif /* _WIN32 || __CYGWIN__ || __linux */
 }
 /*--------------------------------------------------------------------------*/
 void
 mtarch_stop(struct mtarch_thread *thread)
 {
-#if defined(_WIN32) || defined(__CYGWIN__)
-
-  DeleteFiber(thread->mt_thread);
-
-#elif defined(linux) || defined(__linux)
 
-  free(thread->mt_thread);
-
-#endif /* _WIN32 || __CYGWIN__ || __linux */
 }
 /*--------------------------------------------------------------------------*/
 void
 mtarch_pstart(void)
 {
+
 }
 /*--------------------------------------------------------------------------*/
 void
 mtarch_pstop(void)
 {
+
 }
 /*--------------------------------------------------------------------------*/
diff --git a/examples/6lbr/platform/native/lost-symbols.c b/examples/6lbr/platform/native/lost-symbols.c
index 6abf5ae..9b57260 100644
--- a/examples/6lbr/platform/native/lost-symbols.c
+++ b/examples/6lbr/platform/native/lost-symbols.c
@@ -52,13 +52,6 @@ void ctk_dialog_close() {}
 #endif
 #ifdef __UCLIBC__
 #ifndef __UCLIBC_HAS_CONTEXT_FUNCS__
-#include <ucontext.h>
-int getcontext (ucontext_t *__ucp) {return 0;}
-int setcontext (const ucontext_t *__ucp) {return 0;}
 
-int swapcontext (ucontext_t *__restrict __oucp,
-                        const ucontext_t *__restrict __ucp) {return 0;}
-void makecontext (ucontext_t *__ucp, void (*__func) (void),
-                         int __argc, ...) {}
 #endif /* __UCLIBC_HAS_CONTEXT_FUNCS__ */
 #endif /* __UCLIBC__ */
